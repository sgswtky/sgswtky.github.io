<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Function on 壁は登るためにある</title>
    <link>https://sgswtky.github.io/tags/function/</link>
    <description>Recent content in Function on 壁は登るためにある</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 23 Oct 2018 09:30:08 +0900</lastBuildDate>
    
	<atom:link href="https://sgswtky.github.io/tags/function/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ScalaのFunctionが実装するメソッド</title>
      <link>https://sgswtky.github.io/posts/scala-function-method/</link>
      <pubDate>Tue, 23 Oct 2018 09:30:08 +0900</pubDate>
      
      <guid>https://sgswtky.github.io/posts/scala-function-method/</guid>
      <description>しばらく放置してた。反省。
Scalaで関数を定義すると、すでにその時点でいくつかのメソッドが実装されている。 （レシーバとも言う？）
Function1 で実際にどんなメソッドを実装しているかを見てみた。 以下の4つを実装してるっぽい。
compose andThen apply toString    method description     compose 関数の合成   andThen 関数の合成   apply 関数の適用   toString String型に変換    compose  レシーバの関数を後に適用 ２つの Function1 から新しい Function1 を生成  引数に  func{n} を結合するメソッドを３つ compose してみる
object method extends App { def exampleFunc1(s: String): String = s + &amp;#34; func1&amp;#34; def exampleFunc2(s: String): String = s + &amp;#34; func2&amp;#34; def exampleFunc3(s: String): String = s + &amp;#34; func3&amp;#34; val ef1: String =&amp;gt; String = exampleFunc1 val ef2 = exampleFunc2 _ val ef3 = exampleFunc3 _ val f = ef1 compose ef2 compose ef3 val r = f(&amp;#34;EXAMPLE&amp;#34;) println(r) } EXAMPLE func3 func2 func1 composeはレシーバのメソッドを後ろから実行するような動きをするみたい。</description>
    </item>
    
  </channel>
</rss>