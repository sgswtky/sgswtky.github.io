<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ORMapper on 壁は登るためにある</title>
    <link>https://sgswtky.github.io/tags/ormapper/</link>
    <description>Recent content in ORMapper on 壁は登るためにある</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 15 Jul 2018 23:17:35 +0900</lastBuildDate>
    
	<atom:link href="https://sgswtky.github.io/tags/ormapper/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go-xorm/xorm - Golang O/R Mapper触ってみた</title>
      <link>https://sgswtky.github.io/posts/golang-orm-xorm/</link>
      <pubDate>Sun, 15 Jul 2018 23:17:35 +0900</pubDate>
      
      <guid>https://sgswtky.github.io/posts/golang-orm-xorm/</guid>
      <description>先日 sqlx を触ってみて、他のORMも触ってみたいと思って触ってみた
色々試してみた DB接続部分 接続は他のORMと同じような感じ。
package orm import ( &amp;#34;testing&amp;#34; _ &amp;#34;github.com/go-sql-driver/mysql&amp;#34; &amp;#34;github.com/go-xorm/xorm&amp;#34; ) var engine *xorm.Engine func TestXorm(t *testing.T) { var err error engine, err = xorm.NewEngine(&amp;#34;mysql&amp;#34;, &amp;#34;root:rootpasswd@tcp(localhost):3306/example?parseTime=true&amp;amp;charset=utf8&amp;#34;) if err != nil { panic(err) } } 今回操作するDDLと構造体 CREATE TABLE `users` ( `user_id` varchar(11) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;userID&amp;#39;, `user_name` varchar(255) NOT NULL COMMENT &amp;#39;userName&amp;#39;, `created_at` datetime NOT NULL COMMENT &amp;#39;createdAt&amp;#39;, `created_user` varchar(255) DEFAULT NULL COMMENT &amp;#39;createdUser&amp;#39;, `updated_at` datetime NOT NULL COMMENT &amp;#39;updatedAt&amp;#39;, `updated_user` varchar(255) DEFAULT NULL COMMENT &amp;#39;updatedUser&amp;#39;, PRIMARY KEY (`user_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&amp;#39;user&amp;#39;; type Users struct { UserId string UserName string CreatedAt time.</description>
    </item>
    
    <item>
      <title>jmoiron/sqlx - Golang O/R Mapper触ってみた</title>
      <link>https://sgswtky.github.io/posts/golang-orm-sqlx/</link>
      <pubDate>Tue, 10 Jul 2018 13:53:07 +0900</pubDate>
      
      <guid>https://sgswtky.github.io/posts/golang-orm-sqlx/</guid>
      <description>きっかけ 会社で僕のチームでは3層WebアプリでGoをサーバーサイドとして使ってます。
フロントはVuejsをでSPAとしてブラウザで動作する感じです。 AWS上で動いていて、サーバーサイド（Go）とRDS（MySQL）のデータのやり取りで dbr というORMを使っているのですが、以前このORMで一点問題になる事があった。
日本をターゲットにしたプロダクトを作っているので日本を基準にした時刻でDBとやり取りしたいので、JSTとして時刻を扱いたいけど dbr によって強制的にUTCとなる。 UTCからJSTに無理矢理変換するなどして対応しているのですが、正直かっこ悪いので根本的な対応をしたいです。
色々調べてみた所dbrのコミッタはこれをissueでなく仕様としているような発言が以下のissueから見て取れる。
https://github.com/gocraft/dbr/issues/96
このため、この先 dbr でなく別のORMを使用することを検討しています。 軽く調べてみて今回紹介する jmoiron/sqlx が個人的にすごく好きな感じだったので紹介したいと思います。
GoのORMに個人的に求めてるもの Goに合う Goをしばらく触っていて感じるのは多機能で色々やってくれるモノは基本的にGoに合わない気がしています。 例えばJavaのspring系のフレームワークであったりMyBatisのようなXMLとかアノテーションたくさん使っていろんな機能がある奴。
Goはどちらかというと小さいライブラリを組み合わせて使うほうが向いている感じがあって、それぞれが疎結合になってるというのが一番綺麗でわかりやすいような気がしてます。（そして個人的に好き）
個人的に求めてるもの  なんでもやってくれない、なるべく最低限 ActiveRecordみたいな黒魔術でない リレーション張る機能が無い 構造体とのマッピングができる 自分で書くコードが減りそう 読みやすいか 生SQLが書ける  公式READMEを見た感じ  database/sql に一連の拡張機能追加してるだけ database/sql 使ってるなら簡単に導入できる コンセプトがシンプル  な印象を受けて、この時点で 良さそう と思った
実際触ってみて 簡単にCRUD、NamedExecというsqlxが作ったメソッド、トランザクションを一通り試してみた。
select selectでマッピングを行ってくれる。
カラム名は構造体のタグで明示的に指定する。
db, _ := sqlx.Connect(&amp;#34;mysql&amp;#34;, &amp;#34;root:rootpasswd@(example.host:3306)/example?parseTime=true&amp;#34;) type UserStatus struct { UserID string `db:&amp;#34;user_id&amp;#34;` UserName string `db:&amp;#34;user_name&amp;#34;` UserStatusDescription string `db:&amp;#34;user_status_description&amp;#34;` } userStatus := []UserStatus{} err := db.</description>
    </item>
    
  </channel>
</rss>