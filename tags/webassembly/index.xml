<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebAssembly on 壁は登るためにある</title>
    <link>https://sgswtky.github.io/tags/webassembly/</link>
    <description>Recent content in WebAssembly on 壁は登るためにある</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 22 Jul 2018 19:38:54 +0900</lastBuildDate>
    
	<atom:link href="https://sgswtky.github.io/tags/webassembly/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go言語でwasm動かしてみた</title>
      <link>https://sgswtky.github.io/posts/golang-wasm/</link>
      <pubDate>Sun, 22 Jul 2018 19:38:54 +0900</pubDate>
      
      <guid>https://sgswtky.github.io/posts/golang-wasm/</guid>
      <description>wasmとは何かを調べてみて、Goでブラウザで動かしてみました。
WebAssembly とは  略してwasm。 メジャー4ブラウザ（Chrome、Edge、Firefox、Safari）でサポート ブラウザ上でGo等でコンパイルされたバイナリが動かせる👐 同じWeb API（Javascriptが操作できる領域、プロセスのVM?）でJsのコンテキストの呼び出しや、メソッドを呼び出せる感じ。 ネイティブに近いパフォーマンスで動作する  WebAssembly登場の背景  コードのサイズが大きい場合のダウンロードのコストが高いという問題に対応するため、WebAssemblyが登場。 普通にWebやってると感じないと思うけど、ブラウザ上で動作するゲーム・3Dを使ったサービスのJsコードとかは数十MBあるらしいのでサイズ問題は無視できない。   使える言語  LLVMに変換できる言語なら動くらしい。（C・C++・Objective-C・Rust・Go?） kripken/emscripten というツールで LLVM to wasmが可能  将来的に  Jsからwasmに置き換わる事はない Javascriptを補完するだけ  Goで触るには wasmは go1.11 系のバージョンから使用可能。
go1.11 系は正式にリリースされていないので、beta版となる。
僕は go1.11beta2 をインストールして試しました。
※go1.11未満だとエラーになります
&amp;gt; GOARCH=wasm GOOS=js go build -o test.wasm main.go cmd/go: unsupported GOOS/GOARCH pair js/wasm 実際に触ってみるにあたり、golangのwasmをブラウザ上で実際に動かせるこちらのチュートリアルをやってみた https://blog.gopheracademy.com/advent-2017/go-wasm/
触ってみて Goでビルドしたコードがブラウザで動いて感動。
wasmファイルのレスポンスヘッダの Content-Typeが application/wasm となっていた。
以下のようなgoroutineのコードもwasmで動かしてみたらちゃんと動いた。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;math/rand&amp;#34; ) func f(s string, wg *sync.</description>
    </item>
    
  </channel>
</rss>